{
    "questions": [
      {
        "question": "What is the difference between 'let' and 'var' in JavaScript?",
        "options": [
          "let has block scope, var has function scope",
          "var has block scope, let has function scope",
          "let and var are exactly the same",
          "let is for numbers, var is for strings"
        ],
        "answer": "let has block scope, var has function scope"
      },
      {
        "question": "What is the purpose of the 'async/await' keywords?",
        "options": [
          "To handle asynchronous operations in a synchronous way",
          "To make code run faster",
          "To create new functions",
          "To handle errors"
        ],
        "answer": "To handle asynchronous operations in a synchronous way"
      },
      {
        "question": "Which array method is used to transform elements into a new array?",
        "options": [
          "map()",
          "filter()",
          "reduce()",
          "forEach()"
        ],
        "answer": "map()"
      },
      {
        "question": "What is destructuring in JavaScript?",
        "options": [
          "A way to extract values from objects and arrays",
          "A way to delete properties from objects",
          "A way to combine arrays",
          "A way to create new objects"
        ],
        "answer": "A way to extract values from objects and arrays"
      },
      {
        "question": "What is the purpose of the 'Promise' object?",
        "options": [
          "To handle asynchronous operations",
          "To store data temporarily",
          "To create new functions",
          "To modify DOM elements"
        ],
        "answer": "To handle asynchronous operations"
      },
      {
        "question": "What will this Promise code output?",
        "code": "Promise.resolve(1)\n  .then(x => x + 1)\n  .then(x => Promise.resolve(x + 1))\n  .then(x => console.log(x));",
        "options": [
          "3",
          "1",
          "2",
          "undefined"
        ],
        "answer": "3"
      },
      {
        "question": "What's the result of this array operation?",
        "code": "const arr = [1, 2, 3, 4, 5];\nconst result = arr\n  .filter(x => x % 2 === 0)\n  .map(x => x * 2);",
        "options": [
          "[4, 8]",
          "[2, 4]",
          "[2, 4, 6, 8, 10]",
          "[1, 2, 3, 4, 5]"
        ],
        "answer": "[4, 8]"
      },
      {
        "question": "What will this DOM manipulation do?",
        "code": "document.querySelectorAll('.item')\n  .forEach(item => {\n    item.style.display = \n      getComputedStyle(item).display === 'none'\n        ? 'block'\n        : 'none';\n  });",
        "options": [
          "Toggle visibility of elements with class 'item'",
          "Remove all items",
          "Show all items",
          "Hide all items"
        ],
        "answer": "Toggle visibility of elements with class 'item'"
      },
      {
        "question": "What will this code output?",
        "code": "console.log(typeof null);",
        "options": [
          "'object'",
          "'null'",
          "'undefined'",
          "'number'"
        ],
        "answer": "'object'"
      },
      {
        "question": "What will this code output?",
        "code": "const a = [1, 2, 3];\nconst b = [...a];\nb.push(4);\nconsole.log(a);",
        "options": [
          "[1, 2, 3]",
          "[1, 2, 3, 4]",
          "[4, 1, 2, 3]",
          "[1, 2, 3, 4, 4]"
        ],
        "answer": "[1, 2, 3]"
      },
      {
        "question": "What will this code output?",
        "code": "const obj = { a: 1, b: 2 };\nconst { a, b } = obj;\nconsole.log(a, b);",
        "options": [
          "1 2",
          "undefined undefined",
          "null null",
          "2 1"
        ],
        "answer": "1 2"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst [first, ...rest] = arr;\nconsole.log(rest);",
        "options": [
          "[2, 3]",
          "[1, 2, 3]",
          "[1]",
          "[3]"
        ],
        "answer": "[2, 3]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.reduce((acc, val) => acc + val, 0);\nconsole.log(result);",
        "options": [
          "6",
          "0",
          "1",
          "3"
        ],
        "answer": "6"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.find(x => x > 1);\nconsole.log(result);",
        "options": [
          "2",
          "1",
          "3",
          "undefined"
        ],
        "answer": "2"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.every(x => x > 0);\nconsole.log(result);",
        "options": [
          "true",
          "false",
          "undefined",
          "null"
        ],
        "answer": "true"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.some(x => x > 2);\nconsole.log(result);",
        "options": [
          "true",
          "false",
          "undefined",
          "null"
        ],
        "answer": "true"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.includes(2);\nconsole.log(result);",
        "options": [
          "true",
          "false",
          "undefined",
          "null"
        ],
        "answer": "true"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.indexOf(2);\nconsole.log(result);",
        "options": [
          "1",
          "2",
          "0",
          "-1"
        ],
        "answer": "1"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.slice(1, 2);\nconsole.log(result);",
        "options": [
          "[2]",
          "[1, 2]",
          "[2, 3]",
          "[1]"
        ],
        "answer": "[2]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.splice(1, 1);\nconsole.log(arr);",
        "options": [
          "[1, 3]",
          "[1, 2, 3]",
          "[2, 3]",
          "[1]"
        ],
        "answer": "[1, 3]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.concat([4, 5]);\nconsole.log(result);",
        "options": [
          "[1, 2, 3, 4, 5]",
          "[4, 5]",
          "[1, 2, 3]",
          "[5, 4, 3, 2, 1]"
        ],
        "answer": "[1, 2, 3, 4, 5]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.join('-');\nconsole.log(result);",
        "options": [
          "1-2-3",
          "123",
          "1,2,3",
          "1-2-3-"
        ],
        "answer": "1-2-3"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.reverse();\nconsole.log(result);",
        "options": [
          "[3, 2, 1]",
          "[1, 2, 3]",
          "[2, 3, 1]",
          "[3, 1, 2]"
        ],
        "answer": "[3, 2, 1]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.sort((a, b) => b - a);\nconsole.log(result);",
        "options": [
          "[3, 2, 1]",
          "[1, 2, 3]",
          "[2, 3, 1]",
          "[3, 1, 2]"
        ],
        "answer": "[3, 2, 1]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.fill(0);\nconsole.log(result);",
        "options": [
          "[0, 0, 0]",
          "[1, 2, 3]",
          "[0, 1, 2]",
          "[3, 2, 1]"
        ],
        "answer": "[0, 0, 0]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.copyWithin(1, 0);\nconsole.log(result);",
        "options": [
          "[1, 1, 2]",
          "[1, 2, 3]",
          "[2, 3, 1]",
          "[3, 1, 2]"
        ],
        "answer": "[1, 1, 2]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.flatMap(x => [x, x * 2]);\nconsole.log(result);",
        "options": [
          "[1, 2, 2, 4, 3, 6]",
          "[1, 2, 3]",
          "[2, 4, 6]",
          "[1, 2, 3, 4, 5, 6]"
        ],
        "answer": "[1, 2, 2, 4, 3, 6]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.flat();\nconsole.log(result);",
        "options": [
          "[1, 2, 3]",
          "[[1], [2], [3]]",
          "[1, [2], [3]]",
          "[1, 2, [3]]"
        ],
        "answer": "[1, 2, 3]"
      },
      {
        "question": "What will this code output?",
        "code": "const arr = [1, 2, 3];\nconst result = arr.at(-1);\nconsole.log(result);",
        "options": [
          "3",
          "1",
          "2",
          "undefined"
        ],
        "answer": "3"
      }
    ]
  }